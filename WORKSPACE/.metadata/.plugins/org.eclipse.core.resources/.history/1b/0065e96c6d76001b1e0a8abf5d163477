from src.controllers.Controllers import Controllers
import logging
from logging.handlers import RotatingFileHandler
from src.commons.Utils import CommonUtils
import config

from flask import Flask, g, session, redirect, url_for
from src.svi.controllers.routes.RouteMilestone import milestone_bp



port        = 6602
host        = "localhost"
tool_path = os.path.abspath(os.path.dirname(__file__))
# tool_path = '/var/www/html/wrs/app/'

app = Flask( __name__ , static_folder="%s/%s"%(tool_path, Enum.TemplateName.STATIC_HTML_FOLDER), template_folder="%s/%s"%(tool_path, Enum.TemplateName.TEMPLATE_HTML_FOLDER))

argv = sys.argv[1:]
all_configs     = {}
app.config['SECRET_KEY']                    = config.secret_key[config.prefix]
app.config['SESSION_PERMANENT']             = True
app.config['PERMANENT_SESSION_LIFETIME']    = timedelta(days = 7)

working_path        = config.working_path
try:
    logging_lv      = config.logging_level
except  AttributeError:
    logging_lv      = 'ERROR'
logging_level       = Utils.select_logging_level(logging_lv)
log_formatter       = logging.Formatter('%(asctime)s %(levelname)s %(funcName)s(%(lineno)d) %(message)s')
log_name            = os.path.join(working_path, 'wrs.log')
log                 = logging.getLogger()
log.setLevel(logging_level)
handler             = logging.handlers.RotatingFileHandler(log_name,maxBytes= 1000*1024,backupCount=20)
handler.setFormatter(log_formatter)
log.addHandler(handler)
# app.register_blueprint(milestone_bp)
# app.register_blueprint(project_bp)
app.register_blueprint(milestone_bp, url_prefix=config.prefix)
app.register_blueprint(project_bp, url_prefix=config.prefix)

@app.before_request
def global_var():
    g.tool_path             = tool_path



if __name__ == "__main__":
    app.run(port=port, host=host, debug=True, use_reloader=True, threaded=True)
    
    
    
    
